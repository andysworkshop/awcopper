#
# Build script for Andy's Workshop Graphics Controller STM32 F0 firmware.
#

# These variables must be set correctly

STM32PLUS_INSTALL_DIR = "/usr/local/arm-none-eabi"
STM32PLUS_VERSION     = "030500"

# main build script

import os
import os.path
import platform
import subprocess

def usage():

    print """
Usage: scons mode=<MODE> [-jX | -c]

  <MODE>: debug/release.
    debug   = -Og
    release = combination of -Os and -O3

  Examples using -j to do a 4-job parallel build:
    scons mode=debug -j4
    scons mode=release -j4

  The -c (clean) option removes the build output files.
"""

# mode argument must be supplied

mode=ARGUMENTS.get('mode')

if not (mode in ['debug', 'release']):
    usage()
    Exit(1)

# set up build environment and pull in OS environment variables

outdir="build/"+mode
env=Environment(ENV=os.environ)
env.VariantDir(outdir,".",duplicate=0)

# verify that stm32plus is installed in the defined location

stm32plus_lib_build="small" if mode=="release" else "debug"
stm32plus_lib=STM32PLUS_INSTALL_DIR+"/lib/stm32plus-"+STM32PLUS_VERSION+"/libstm32plus-"+stm32plus_lib_build+"-f051-8000000.a"

if not os.path.isfile(stm32plus_lib):
    print stm32plus_lib+" does not exist."
    print "Please edit SConstruct and check the STM32PLUS_INSTALL_DIR and STM32PLUS_VERSION variables."
    Exit(1)

# replace the compiler values in the environment

env.Replace(CC="arm-none-eabi-gcc")
env.Replace(CXX="arm-none-eabi-g++")
env.Replace(AS="arm-none-eabi-as")

# create the C and C++ flags that are needed. We can't use the extra or pedantic errors on the ST library code.

env.Replace(CCFLAGS=["-Wall","-Werror","-ffunction-sections","-fdata-sections","-fno-exceptions","-mthumb","-gdwarf-2","-pipe","-mcpu=cortex-m0","-DSTM32PLUS_F0_51","-DHSE_VALUE=8000000"])
env.Replace(CXXFLAGS=["-Wextra","-pedantic-errors","-fno-rtti","-std=gnu++11","-fno-threadsafe-statics"])
env.Append(ASFLAGS="-mcpu=cortex-m0")
env.Append(LINKFLAGS=["-Xlinker","--gc-sections","-mthumb","-g3","-gdwarf-2","-mcpu=cortex-m0"])
env.Append(LINKFLAGS=["-Tsystem/f051/Linker.ld","-Wl,-wrap,__aeabi_unwind_cpp_pr0","-Wl,-wrap,__aeabi_unwind_cpp_pr1","-Wl,-wrap,__aeabi_unwind_cpp_pr2"])

# set the include directories - not a simple task on cygwin

if "cygwin" in platform.system().lower():

  # g++ must see the windows style C:/foo/bar path, not the cygwin /usr/foo/bar style so we must translate the
  # paths here. also, scons will try to interpret ":" as a separator in cygwin which gives us the additional problem
  # of not being able to use the interpreted CPPPATH. We have to use CXX flags instead. 

  proc=subprocess.Popen("cygpath --mixed "+STM32PLUS_INSTALL_DIR,stdout=subprocess.PIPE,shell=True)
  (cygbasepath,err)=proc.communicate()
  cygbasepath=cygbasepath.rstrip("\n");     # chomp the newline

  env.Append(CCFLAGS="-I"+cygbasepath+"/include/stm32plus-"+STM32PLUS_VERSION)
  env.Append(CXXFLAGS="-I"+cygbasepath+"/include/stm32plus-"+STM32PLUS_VERSION+"/stl")
  env.Append(LINKFLAGS="-L"+cygbasepath+"/lib/stm32plus-"+STM32PLUS_VERSION)

else:
  env.Append(CPPPATH=[
      STM32PLUS_INSTALL_DIR+"/include/stm32plus-"+STM32PLUS_VERSION,
      STM32PLUS_INSTALL_DIR+"/include/stm32plus-"+STM32PLUS_VERSION+"/stl"])
  
  env.Append(LIBPATH=STM32PLUS_INSTALL_DIR+"/lib/stm32plus-"+STM32PLUS_VERSION)

# set the library path

env.Append(LIBS="stm32plus-"+stm32plus_lib_build+"-f051-8000000.a")

# add on the mode=specific optimisation definitions

if mode=="debug":
  env.Append(CCFLAGS=["-Og","-g3","-DDEBUG"])
  specials_env=env.Clone();

elif mode=="release":
  specials_env=env.Clone();
  env.Append(CCFLAGS=["-Os"])
  specials_env.Append(CCFLAGS=["-O3"])

# collect the source files

normals=env.Object([f for f in Glob(outdir+"/*.cpp")
  if "CommandExecutor.cpp" not in f.path])

# CommandExecutor is compiled with -O3 in release mode

specials=specials_env.Object(Glob(outdir+"/CommandExecutor.cpp"))

# append the system startup files

normals.append("system/LibraryHacks.cpp")
normals.append("system/f051/Startup.asm")
normals.append("system/f051/System.c")

# here's where the linker script is located

linkerscript="system/f051/Linker.ld"

# trigger a build with the correct output name

elf=env.Program(outdir+"/awcopper.elf",[normals,specials])
hex=env.Command(outdir+"/awcopper.hex",elf,"arm-none-eabi-objcopy -O ihex "+outdir+"/awcopper.elf "+outdir+"/awcopper.hex")
bin=env.Command(outdir+"/awcopper.bin",elf,"arm-none-eabi-objcopy -O binary "+outdir+"/awcopper.elf "+outdir+"/awcopper.bin")
lst=env.Command(outdir+"/awcopper.lst",elf,"arm-none-eabi-objdump -h -S "+outdir+"/awcopper.elf > "+outdir+"/awcopper.lst")
size=env.Command(outdir+"/awcopper.size",elf,"arm-none-eabi-size --format=berkeley "+outdir+"/awcopper.elf | tee "+outdir+"/awcopper.size")
